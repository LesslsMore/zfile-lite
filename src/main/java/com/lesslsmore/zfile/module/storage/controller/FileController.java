package com.lesslsmore.zfile.module.storage.controller;import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;import com.github.xiaoymin.knife4j.annotations.ApiSort;import com.lesslsmore.zfile.module.storage.chain.FileChain;import com.lesslsmore.zfile.module.storage.chain.FileContext;import com.lesslsmore.zfile.module.storage.context.StorageSourceContext;import com.lesslsmore.zfile.module.storage.convert.StorageSourceConvert;import com.lesslsmore.zfile.module.storage.model.entity.StorageSource;import com.lesslsmore.zfile.module.storage.exception.InvalidStorageSourceException;import com.lesslsmore.zfile.module.storage.model.request.FileListRequest;import com.lesslsmore.zfile.module.storage.model.result.FileInfoResult;import com.lesslsmore.zfile.module.storage.model.result.FileItemResult;import com.lesslsmore.zfile.module.storage.model.result.StorageSourceResult;import com.lesslsmore.zfile.module.storage.service.StorageSourceService;import com.lesslsmore.zfile.module.storage.service.base.AbstractBaseFileService;import com.lesslsmore.zfile.core.util.AjaxJson;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import java.util.List;/** * 文件列表相关接口, 如展示存储源列表, 展示文件列表, 搜索文件列表等. * * @author zhaojun */@Api(tags = "文件列表模块")@ApiSort(2)@Slf4j@RequestMapping("/api/storage")@RestControllerpublic class FileController {	@Resource	private StorageSourceContext storageSourceContext;		@Resource	private StorageSourceService storageSourceService;	@Resource	private StorageSourceConvert storageSourceConvert;	@Resource	private FileChain fileChain;	@GetMapping("/domain")	public String getDomain(HttpServletRequest request) {		// 获取当前访问的协议，例如 http 或 https		String scheme = request.getScheme();		// 获取当前访问的域名		String serverName = request.getServerName();		// 获取当前访问的端口号		int serverPort = request.getServerPort();		return scheme + "://" + serverName + ":" + serverPort;	}			@ApiOperationSupport(order = 1)	@ApiOperation(value = "获取存储源列表", notes = "获取所有已启用的存储源, 并且按照后台顺序排序")	@GetMapping("/list")	public AjaxJson<List<StorageSourceResult>> storageList() {		List<StorageSource> storageList = storageSourceService.findAllEnableOrderByOrderNum();		List<StorageSourceResult> storageSourceResultList =				storageSourceConvert.entityToResultList(storageList);		return AjaxJson.getSuccessData(storageSourceResultList);	}	@ApiOperationSupport(order = 2)	@ApiOperation(value = "获取文件列表", notes = "获取某个存储源下, 指定路径的文件&文件夹列表")	@PostMapping("/files")	public AjaxJson<FileInfoResult> list(@Valid @RequestBody FileListRequest fileListRequest) throws Exception {		String storageKey = fileListRequest.getStorageKey();		Integer storageId = storageSourceService.findIdByKey(storageKey);		if (storageId == null) {			throw new InvalidStorageSourceException("通过存储源 key 未找到存储源, key: " + storageKey);		}		// 处理请求参数默认值		fileListRequest.handleDefaultValue();		// 获取文件列表		AbstractBaseFileService<?> fileService = storageSourceContext.getByStorageId(storageId);		List<FileItemResult> fileItemList = fileService.fileList(fileListRequest.getPath());		// 执行责任链		FileContext fileContext = FileContext.builder()				.storageId(storageId)				.fileListRequest(fileListRequest)				.fileItemList(fileItemList).build();		fileChain.execute(fileContext);		return AjaxJson.getSuccessData(new FileInfoResult(fileContext.getFileItemList(), fileContext.getPasswordPattern()));	}}